function sem_write_initfile( n, mx, my, mz, x, y, z, s0, ux0, uy0, uz0, rho, beta, vx, vy, vz, init_file_name )
% sem_write_initfile( n, mx, my, mz, x, y, z, rho0, ux0, uy0, uz0, rho, beta, vx, vy, vz, init_file_name )
%
% Writes an initial conditions file containing the mesh and conditions
% specified 2D multidomain.  Each condition may be specified as a constant
% value across the grid, or on a per grid point basis (in xi-first indexing).
%
% Takes 17 arguments:
%
%   n                   - Number of GLL points per direction, per subdomain.
%   mx                  - Number of subdomains in the x-direction.
%   my                  - Number of subdomains in the y-direction.
%   mz                  - Number of subdomains in the x-direction.
%   (x,y,z)             - The grid variables, as generated by sem_*_mesh.m
%   (s0, ux0, uy0, uz0) - The initial values of the acoustic variables, representing
%                         condensation, and the three components of acoustic particle
%                         velocity.
%   (rho, beta)         - The density and the bulk modulus of the background flow.  Can
%                         be constant or vary over the grid.
%   (vx,vy,vz)          - The background hydrodynamic flow; should be incompressible.
%   init_file_name      - String indicating the file to save the generated initial
%                         conditions in.
%
% Returns nothing.
%
% 7 Mar 2013
% Sumedh Joshi

    % Create and write all the constants.
    h5create( init_file_name, '/grid/n',  [1] );
    h5create( init_file_name, '/grid/mx', [1] );
    h5create( init_file_name, '/grid/my', [1] );
    h5create( init_file_name, '/grid/mz', [1] );
    h5write( init_file_name, '/grid/n',  n );
    h5write( init_file_name, '/grid/mx', mx );
    h5write( init_file_name, '/grid/my', mx );
    h5write( init_file_name, '/grid/mz', mz );

    % Write the grid.
    h5create( init_file_name, '/grid/x', double( [ mx*n, my*n, mz*n ] ) );
    h5create( init_file_name, '/grid/y', double( [ mx*n, my*n, mz*n ] ) );
    h5create( init_file_name, '/grid/z', double( [ mx*n, my*n, mz*n ] ) );
    h5write( init_file_name, '/grid/x', reshape( x, mx*n, my*n, mz*n ) );
    h5write( init_file_name, '/grid/y', reshape( y, mx*n, my*n, mz*n ) );
    h5write( init_file_name, '/grid/z', reshape( z, mx*n, my*n, mz*n ) );

    % If any of the passed in parameters are scalars, expand them as a constant vector onto the grid.
    if numel( s0 ) == 1
      s0 = s0 * ones( mx*n, my*n, mz*n );
    end
    if numel( ux0 ) == 1
      ux0 = ux0 * ones( mx*n, my*n, mz*n );
    end
    if numel( uy0 ) == 1
      uy0 = uy0 * ones( mx*n, my*n, mz*n );
    end
    if numel( uz0 ) == 1
      uz0 = uz0 * ones( mx*n, my*n, mz*n );
    end
    if numel( rho ) == 1
      rho = rho * ones( mx*n, my*n, mz*n );
    end
    if numel( beta ) == 1
      beta = beta * ones( mx*n, my*n, mz*n );
    end
    if numel( vx ) == 1
      vx = vx * ones( mx*n, my*n, mz*n );
    end
    if numel( vy ) == 1
      vy = vy * ones( mx*n, my*n, mz*n );
    end
    if numel( vz ) == 1
      vz = vz * ones( mx*n, my*n, mz*n );
    end

    % Write the initial conditions.
    h5create( init_file_name, '/ic/s',       double( [ mx*n, my*n, mz*n ] ) );
    h5create( init_file_name, '/ic/ux',      double( [ mx*n, my*n, mz*n ] ) );
    h5create( init_file_name, '/ic/uy',      double( [ mx*n, my*n, mz*n ] ) );
    h5create( init_file_name, '/ic/uz',      double( [ mx*n, my*n, mz*n ] ) );
    h5write( init_file_name, '/ic/s',       reshape( s0,  mx*n, my*n, mz*n ) );
    h5write( init_file_name, '/ic/ux',      reshape( ux0, mx*n, my*n, mz*n ) );
    h5write( init_file_name, '/ic/uy',      reshape( uy0, mx*n, my*n, mz*n ) );
    h5write( init_file_name, '/ic/uz',      reshape( uz0, mx*n, my*n, mz*n ) );

    % Write the hydrodynamic flow variables.
    h5create( init_file_name, '/environment/rho',   double( [ mx*n, my*n, mz*n ] ) );
    h5write( init_file_name,  '/environment/rho',   reshape( rho,  mx*n, my*n, mz*n ) );
    h5create( init_file_name, '/environment/beta',  double( [ mx*n, my*n, mz*n ] ) );
    h5write( init_file_name,  '/environment/beta',  reshape( beta,  mx*n, my*n, mz*n ) );
    h5create( init_file_name, '/environment/vx',    double( [ mx*n, my*n, mz*n ] ) );
    h5write( init_file_name,  '/environment/vx',    reshape( vx,  mx*n, my*n, mz*n ) );
    h5create( init_file_name, '/environment/vy',    double( [ mx*n, my*n, mz*n ] ) );
    h5write( init_file_name,  '/environment/vy',    reshape( vy,  mx*n, my*n, mz*n ) );
    h5create( init_file_name, '/environment/vz',    double( [ mx*n, my*n, mz*n ] ) );
    h5write( init_file_name,  '/environment/vz',    reshape( vz,  mx*n, my*n, mz*n ) );

end
